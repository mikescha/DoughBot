Feature ideas:
1) When the user makes a change, save the settings in a cookie so the next time the page loads 
   then all the data is there.

3) Allow the user to choose the amount of pizza by calories per ball

4) Add buttons to let the user increase/decrease the numeric amounts instead of doing text input

Bugs:
1)  When the user last selected imperial, leaves the page, and then comes back, the default units are Imperial but the default pizza size is 30. So,
    -- save the last values in the the cookies and then reinitialize everything at launch
    -- on startup, clear the cookies and reset to metric


Done:
2) Get the diameter list to adjust based on CM or IN



Taken out of views.py:
    # If we want to read from the form itself, do like this: style = form.cleaned_data["pizza_style"]


Taken out of header.js
    // This is only for allowing somebody to click the unit in the form to change it from there.
    /*
    $('[data-metric]').on("click", function (event) {
        console.log('Current measurement is ' + currentUnit);

        if (currentUnit === 'standard') {
            var selectedUnit = 'metric';
            $('.unitSwitch a').removeClass('unitSwitch-active');
            $('.unitSwitch a[data-unit-type="' + selectedUnit + '"]').addClass('unitSwitch-active');
            currentUnit = selectedUnit;
        }
        else if (currentUnit === 'metric') {
            var selectedUnit = 'standard';
            $('.unitSwitch a').removeClass('unitSwitch-active');
            $('.unitSwitch a[data-unit-type="' + selectedUnit + '"]').addClass('unitSwitch-active');
            currentUnit = selectedUnit;
        }
        $('[data-metric]').each(function () {
            var $this = $(this);

            // if the default data unit value is undefined, save the original text as the value
            if ($this.data('standard') === undefined) {
                $this.data('standard', $this.text());
            }
            // If the shown text doesn't match the selected unit data value, change it.
            if ($this.text !== $this.data(selectedUnit)) {
                $this.text($this.data(selectedUnit));
            }
        });
    });
    */








Taken out of pizza.html:
  <p class="input-group-text text-muted"><small>Measurements are in <strong data-standard="US/Imperial units" data-metric="Metric units">US/Imperial units</strong> <span data-standard="(lbs, oz, in)" data-metric="(kg, ml, cm)">(lbs, oz, ft)</span></small></p>



Taken out of layout.html:
<head>
	<script src="{% static 'app/scripts/modernizr-2.6.2.js' %}"></script>
	<link rel="stylesheet" type="text/css" href="{% static 'app/content/bootstrap.min.css' %}" />
	<link rel="stylesheet" type="text/css" href="{% static 'app/content/site.css' %}" />

<body>
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li><a href="{% url 'home' %}">Home</a></li>
                    <li><a href="{% url 'about' %}">About</a></li>
                    <li><a href="{% url 'contact' %}">Contact</a></li>
                </ul>
                {% include 'app/loginpartial.html' %}
            </div>

<script>
	<script src="{% static 'app/scripts/jquery-1.10.2.js' %}"></script>
    <script src="{% static 'app/scripts/bootstrap.js' %}"></script>
    <script src="{% static 'app/scripts/respond.js' %}"></script>


FROM INDEX.HTML

<div class="jumbotron">
    <h1>PizzaBot</h1>
    <p class="lead">PizzaBot helps you get the perfect dough for your pizza, every time!</p>
</div>

<div class="row">
    <div class="col-md-4">
        <h2>Getting started</h2>
        <p>
            Django gives you a powerful, patterns-based way to build dynamic websites that
            enables a clean separation of concerns and gives you full control over markup
            for enjoyable, agile development.
        </p>
        <p><a class="btn btn-default" href="https://djangobook.com/django-tutorials/">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Get more libraries</h2>
        <p>The Python Package Index is a repository of software for the Python programming language.</p>
        <p><a class="btn btn-default" href="https://pypi.org/">Learn more &raquo;</a></p>
    </div>
    <div class="col-md-4">
        <h2>Microsoft Azure</h2>
        <p>You can easily publish to Microsoft Azure using Visual Studio. Find out how you can host your application using a free trial today.</p>
        <p><a class="btn btn-default" href="http://azure.microsoft.com">Learn more &raquo;</a></p>
    </div>
</div>
